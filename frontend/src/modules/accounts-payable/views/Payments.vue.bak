<template>
  <div class="ap-payments">
    <!-- Header Section -->
    <div class="page-header">
      <div class="container">
        <div class="header-content">
          <div>
            <h1>AP Payments</h1>
            <p>Process and manage vendor payments</p>
          </div>
          <div class="page-actions">
            <Button 
              label="New Payment" 
              icon="pi pi-plus" 
              @click="handleNewPayment" 
              class="mr-2"
            />
            <Button 
              label="Export" 
              icon="pi pi-download" 
              @click="showExportDialog = true" 
              :loading="isExporting"
              severity="secondary"
              outlined
            />
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="container">
      <!-- Summary Cards -->
      <div class="grid mb-4">
        <div v-for="(summary, index) in summaryCards" :key="index" class="col-12 md:col-6 lg:col-3">
          <Card>
            <template #title>{{ summary.title }}</template>
            <template #content>
              <div class="flex align-items-center justify-content-between">
                <span class="text-3xl font-bold" :class="summary.class">
                  {{ formatCurrency(summary.amount) }}
                </span>
                <i :class="summary.icon" class="text-4xl opacity-30"></i>
              </div>
              <div class="mt-3 text-sm" :class="summary.trendClass">
                <i :class="summary.trendIcon"></i>
                <span class="ml-1">{{ summary.trendText }}</span>
              </div>
            </template>
          </Card>
        </div>
      </div>

      <!-- Filters -->
      <div class="card mb-4">
        <div class="p-fluid grid">
          <div class="field col-12 md:col-4">
            <span class="p-input-icon-left w-full">
              <i class="pi pi-search" />
              <InputText 
                v-model="filters.searchQuery" 
                placeholder="Search payments..." 
                class="w-full"
              />
            </span>
          </div>
          
          <div class="field col-12 md:col-2">
            <Dropdown 
              v-model="filters.status" 
              :options="statusOptions" 
              optionLabel="label"
              optionValue="value"
              placeholder="Status"
              class="w-full"
              :showClear="true"
            />
          </div>
          
          <div class="field col-12 md:col-3">
            <Calendar 
              v-model="filters.dateRange" 
              selectionMode="range" 
              :manualInput="false" 
              placeholder="Date Range"
              dateFormat="yy-mm-dd"
              class="w-full"
              :showIcon="true"
            />
          </div>
          
          <div class="field col-12 md:col-3 flex align-items-center justify-content-end gap-2">
            <Button 
              label="Reset" 
              icon="pi pi-refresh" 
              class="p-button-text" 
              @click="resetFilters"
            />
            <Button 
              label="Apply" 
              icon="pi pi-filter" 
              class="p-button-primary"
              @click="applyFilters"
            />
          </div>
        </div>
      </div>

      <!-- Data Table -->
      <div class="card">
        <div class="flex justify-content-between align-items-center mb-4">
          <h2 class="m-0">Payment Records</h2>
          <div class="flex gap-2">
            <Button 
              label="Print Selected" 
              icon="pi pi-print" 
              @click="printSelected" 
              :disabled="!selectedPayments.length"
              outlined
            />
            <Button 
              label="Delete Selected" 
              icon="pi pi-trash" 
              @click="confirmDeleteSelected" 
              :disabled="!selectedPayments.length"
              severity="danger"
              outlined
            />
          </div>
        </div>

        <DataTable 
          v-model:selection="selectedPayments"
          :value="filteredPayments" 
          :paginator="true" 
          :rows="10"
          :rowsPerPageOptions="[5, 10, 25, 50]"
          :loading="isLoading"
          :globalFilterFields="['paymentNumber', 'vendorName', 'reference']"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} payments"
          responsiveLayout="scroll"
          dataKey="id"
          class="p-datatable-sm"
        >
          <Column selectionMode="multiple" headerStyle="width: 3rem"></Column>
          
          <Column field="paymentNumber" header="Payment #" sortable>
            <template #body="{ data }">
              <span class="font-medium text-color">{{ data.paymentNumber }}</span>
            </template>
          </Column>
          
          <Column field="paymentDate" header="Date" sortable>
            <template #body="{ data }">
              {{ formatDate(data.paymentDate) }}
            </template>
          </Column>
          
          <Column field="vendorName" header="Vendor" sortable>
            <template #body="{ data }">
              <div class="flex align-items-center">
                <Avatar 
                  :label="data.vendorName.charAt(0).toUpperCase()" 
                  class="mr-2" 
                  style="background-color: #2196F3; color: #ffffff"
                  shape="circle"
                />
                <span>{{ data.vendorName }}</span>
              </div>
            </template>
          </Column>
          
          <Column field="amount" header="Amount" sortable>
            <template #body="{ data }">
              <span :class="{ 'text-green-500': data.amount > 0, 'text-red-500': data.amount < 0 }">
                {{ formatCurrency(data.amount) }}
              </span>
            </template>
          </Column>
          
          <Column field="method" header="Method" sortable>
            <template #body="{ data }">
              <Tag :value="formatPaymentMethod(data.method)" :severity="getPaymentMethodSeverity(data.method)" />
            </template>
          </Column>
          
          <Column field="status" header="Status" sortable>
            <template #body="{ data }">
              <Tag :value="data.status" :severity="getStatusSeverity(data.status)" />
            </template>
          </Column>
          
          <Column header="Actions" :exportable="false" style="min-width: 10rem">
            <template #body="{ data }">
              <div class="flex gap-2">
                <Button 
                  icon="pi pi-eye" 
                  class="p-button-rounded p-button-text p-button-sm" 
                  @click="viewPayment(data)"
                  v-tooltip.top="'View Details'"
                />
                <Button 
                  icon="pi pi-pencil" 
                  class="p-button-rounded p-button-text p-button-sm p-button-success" 
                  @click="editPayment(data)"
                  v-tooltip.top="'Edit'"
                />
                <Button 
                  icon="pi pi-trash" 
                  class="p-button-rounded p-button-text p-button-sm p-button-danger" 
                  @click="confirmDeletePayment(data)"
                  v-tooltip.top="'Delete'"
                />
                <Button 
                  icon="pi pi-print" 
                  class="p-button-rounded p-button-text p-button-sm p-button-help" 
                  @click="printCheck(data)"
                  v-tooltip.top="'Print Check'"
                />
              </div>
            </template>
          </Column>
          
          <template #empty>
            <div class="text-center p-4">
              <i class="pi pi-search text-4xl text-400 mb-3" />
              <p class="text-600">No payments found. Try adjusting your filters or add a new payment.</p>
            </div>
          </template>
          
          <template #loading>
            <div class="flex justify-content-center p-4">
              <ProgressSpinner style="width: 50px; height: 50px" strokeWidth="4" />
            </div>
          </template>
        </DataTable>
      </div>
          
          <select v-model="filters.method" class="filter-input">
            <option value="">All Methods</option>
            <option v-for="method in paymentMethods" :key="method.value" :value="method.value">
              {{ method.label }}
            </option>
          </select>
          
          <input 
            type="date" 
            v-model="filters.date" 
            class="filter-input"
          >
          
          <button class="btn btn-outline" @click="resetFilters">
            <i class="pi pi-filter-slash"></i> Clear Filters
          </button>
        </div>
      </div>

      <!-- Payments Table -->
      <div class="table-responsive">
        <table class="payments-table">
          <thead>
            <tr>
              <th><input type="checkbox" v-model="selectAll" @change="toggleSelectAll"></th>
              <th>Payment #</th>
              <th>Date</th>
              <th>Vendor</th>
              <th>Amount</th>
              <th>Method</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="payment in paginatedPayments" :key="payment.id">
              <td><input type="checkbox" v-model="selectedPayments" :value="payment.id"></td>
              <td>{{ payment.paymentNumber }}</td>
              <td>{{ formatDate(payment.paymentDate) }}</td>
              <td>{{ payment.vendorName }}</td>
              <td>{{ formatCurrency(payment.amount) }}</td>
              <td><span class="badge" :class="`badge-${payment.method}">
                {{ formatMethod(payment.method) }}
              </span></td>
              <td><span class="badge" :class="`badge-${payment.status}">
                {{ formatStatus(payment.status) }}
              </span></td>
              <td class="actions">
                <button class="btn-icon" @click="viewPayment(payment)" title="View">
                  <i class="pi pi-eye"></i>
                </button>
                <button class="btn-icon" @click="editPayment(payment)" title="Edit">
                  <i class="pi pi-pencil"></i>
                </button>
                <button class="btn-icon" @click="printCheck(payment)" title="Print Check">
                  <i class="pi pi-print"></i>
                </button>
              </td>
            </tr>
            <tr v-if="!filteredPayments.length">
              <td colspan="8" class="text-center">No payments found</td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="pagination" v-if="totalPages > 1">
        <button 
          class="btn btn-outline" 
          :disabled="currentPage === 1"
          @click="currentPage--"
        >
          Previous
        </button>
        <span>Page {{ currentPage }} of {{ totalPages }}</span>
        <button 
          class="btn btn-outline" 
          :disabled="currentPage >= totalPages"
          @click="currentPage++"
        >
          Next
        </button>
      </div>
    </div>

    <!-- Create/Edit Payment Modal -->
    <PaymentModal 
      v-if="showCreateModal || editingPayment"
      :payment="editingPayment"
      @close="closeModal"
      @save="savePayment"
    />
    
    <!-- Export Dialog -->
    <Dialog 
      v-model:visible="showExportDialog" 
      header="Export Payments" 
      :modal="true"
      :style="{ width: '500px' }"
    >
      <div class="p-fluid">
        <div class="field">
          <label for="exportFormat">Format</label>
          <Dropdown 
            id="exportFormat"
            v-model="exportFormat"
            :options="['PDF', 'Excel', 'CSV']"
            class="w-full"
          />
        </div>
        
        <div class="field">
          <label for="exportRange">Range</label>
          <Dropdown 
            id="exportRange"
            v-model="exportRange"
            :options="[
              { label: 'All Payments', value: 'all' },
              { label: 'Current Page', value: 'page' },
              { label: 'Selected Payments', value: 'selected' },
              { label: 'Custom Range', value: 'custom' }
            ]"
            optionLabel="label"
            optionValue="value"
            class="w-full"
          />
        </div>
        
        <div class="field" v-if="exportRange === 'custom'">
          <label for="exportDateRange">Date Range</label>
          <Calendar 
            id="exportDateRange"
            v-model="exportDateRange" 
            selectionMode="range" 
            :manualInput="false" 
            dateFormat="yy-mm-dd"
            class="w-full"
            :showIcon="true"
          />
        </div>
      </div>
      
      <template #footer>
        <Button 
          label="Cancel" 
          icon="pi pi-times" 
          class="p-button-text" 
          @click="showExportDialog = false"
        />
        <Button 
          label="Export" 
          icon="pi pi-download" 
          class="p-button-primary" 
          @click="handleExport"
          :loading="isExporting"
        />
      </template>
    </Dialog>
    
    <!-- Delete Confirmation Dialog -->
    <ConfirmDialog />
    <Toast />
  </div>
</template>

            <option value="scheduled">Scheduled</option>
            <option value="processed">Processed</option>
            <option value="failed">Failed</option>
          </select>
          <select v-model="selectedMethod" class="filter-input">
            <option value="">All Methods</option>
            <option value="check">Check</option>
            <option value="ach">ACH</option>
            <option value="wire_transfer">Wire Transfer</option>
            <option value="ibft">IBFT</option>
            <option value="cash">Cash</option>
            <option value="debit_card">Debit Card</option>
            <option value="credit_card">Credit Card</option>
            <option value="digital_wallet">Digital Wallet</option>
            <option value="crypto">Cryptocurrency</option>
            <option value="mobile_payment">Mobile Payment</option>
            <option value="online_banking">Online Banking</option>
          </select>
          <input type="date" v-model="dateFilter" class="filter-input">
        </div>
      </div>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import { useToast } from 'primevue/usetoast'
import type { ToastMessageOptions } from 'primevue/toast'

// Types
interface Payment {
  id: number;
  paymentNumber: string;
  vendorName: string;
  amount: number;
  paymentDate: string;
  method: string;
  status: 'pending' | 'processed' | 'failed';
  referenceNumber?: string;
  notes?: string;
}

// Component state
const toast = useToast()
const searchQuery = ref('')
const selectedStatus = ref('')
const selectedMethod = ref('')
const dateFilter = ref('')
const showCreateModal = ref(false)
const isExporting = ref(false)
const selectedPayments = ref<number[]>([])
const selectAll = ref(false)

// Mock data - in a real app, this would come from an API
const payments = ref<Payment[]>([])

// Summary data
const summaryData = ref({
  thisMonth: 0,
  pending: 0,
  scheduled: 0,
  yearToDate: 0
})

// Computed properties
const filteredPayments = computed(() => {
  return payments.value.filter(payment => {
    const matchesSearch = !searchQuery.value || 
      payment.paymentNumber.toLowerCase().includes(searchQuery.value.toLowerCase()) ||
      payment.vendorName.toLowerCase().includes(searchQuery.value.toLowerCase())
      
    const matchesStatus = !selectedStatus.value || 
      payment.status === selectedStatus.value
      
    const matchesMethod = !selectedMethod.value || 
      payment.method === selectedMethod.value
      
    const matchesDate = !dateFilter.value || 
      payment.paymentDate === dateFilter.value
      
    return matchesSearch && matchesStatus && matchesMethod && matchesDate
  })
})

// Methods
const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount)
}

const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString()
}

const resetFilters = () => {
  searchQuery.value = ''
  selectedStatus.value = ''
  selectedMethod.value = ''
  dateFilter.value = ''
}

const toggleSelectAll = () => {
  if (selectAll.value) {
    selectedPayments.value = filteredPayments.value.map(p => p.id)
  } else {
    selectedPayments.value = []
  }
}

const viewPayment = (payment: Payment) => {
  console.log('View payment:', payment)
}

const editPayment = (payment: Payment) => {
  console.log('Edit payment:', payment)
  showCreateModal.value = true
}

const printCheck = (payment: Payment) => {
  console.log('Print check for payment:', payment)
  window.print()
}

const bulkProcess = () => {
  console.log('Process payments:', selectedPayments.value)
}

const exportPayments = async () => {
  try {
    isExporting.value = true
    console.log('Exporting payments:', filteredPayments.value)
    
    toast.add({
      severity: 'success',
      summary: 'Export Successful',
      detail: 'Payments exported successfully',
      life: 3000
    } as ToastMessageOptions)
  } catch (error) {
    console.error('Export failed:', error)
    toast.add({
      severity: 'error',
      summary: 'Export Failed',
      detail: 'Failed to export payments',
      life: 3000
    } as ToastMessageOptions)
  } finally {
    isExporting.value = false
  }
}

// Lifecycle hooks
onMounted(() => {
  // Load initial data
  payments.value = [
    {
      id: 1,
      paymentNumber: 'PAY-001',
      vendorName: 'Vendor A',
      amount: 1000.00,
      paymentDate: '2023-01-15',
      method: 'check',
      status: 'pending',
      referenceNumber: 'CHK12345'
    },
    {
      id: 2,
      paymentNumber: 'PAY-002',
      vendorName: 'Vendor B',
      amount: 2500.50,
      paymentDate: '2023-01-20',
      method: 'ach',
      status: 'processed',
      referenceNumber: 'ACH98765'
    }
  ]
  
  // Update summary data
  summaryData.value = {
    thisMonth: 3500.50,
    pending: 1000.00,
    scheduled: 0,
    yearToDate: 3500.50
  }
})
</script>

<template>
  <div class="payments-container">
    <div class="page-header">
      <h2>Accounts Payable - Payments</h2>
      <div class="header-actions">
        <button class="btn btn-primary" @click="showCreateModal = true">
          <i class="pi pi-plus"></i> New Payment
        </button>
      </div>
    </div>

    <!-- Summary Cards -->
    <div class="summary-cards">
      <div class="summary-card">
        <div class="summary-title">This Month</div>
        <div class="summary-value">{{ formatCurrency(summaryData.thisMonth) }}</div>
      </div>
      <div class="summary-card">
        <div class="summary-title">Pending</div>
        <div class="summary-value">{{ formatCurrency(summaryData.pending) }}</div>
      </div>
      <div class="summary-card">
        <div class="summary-title">Scheduled</div>
        <div class="summary-value">{{ formatCurrency(summaryData.scheduled) }}</div>
      </div>
      <div class="summary-card">
        <div class="summary-title">YTD</div>
        <div class="summary-value">{{ formatCurrency(summaryData.yearToDate) }}</div>
      </div>
    </div>

    <!-- Filters -->
    <div class="filters">
      <div class="search-box">
        <i class="pi pi-search"></i>
        <input 
          type="text" 
          v-model="searchQuery" 
          placeholder="Search payments..." 
          class="search-input"
        >
      </div>
      
      <div class="filter-group">
        <label>Status:</label>
        <select v-model="selectedStatus" class="filter-select">
          <option value="">All Statuses</option>
          <option value="pending">Pending</option>
          <option value="processed">Processed</option>
          <option value="failed">Failed</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label>Method:</label>
        <select v-model="selectedMethod" class="filter-select">
          <option value="">All Methods</option>
          <option value="check">Check</option>
          <option value="ach">ACH Transfer</option>
          <option value="wire">Wire Transfer</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label>Date Range:</label>
        <input 
          type="date" 
          v-model="dateFilter" 
          class="filter-select"
        >
      </div>
      
      <button class="btn btn-secondary" @click="resetFilters">
        <i class="pi pi-filter-slash"></i> Reset
      </button>
    </div>

    <!-- Actions Bar -->
    <div class="actions-bar">
      <div class="left-actions">
        <button 
          class="btn btn-outline" 
          @click="exportPayments"
          :disabled="filteredPayments.length === 0"
        >
          <i class="pi pi-download"></i> Export
        </button>
        <button 
          class="btn btn-outline" 
          @click="bulkProcess"
          :disabled="selectedPayments.length === 0"
        >
          <i class="pi pi-cog"></i> Process Selected
        </button>
      </div>
      <div class="right-actions">
        <span class="text-muted">
          Showing {{ filteredPayments.length }} of {{ payments.length }} payments
        </span>
      </div>
    </div>

    <!-- Payments Table -->
    <div class="table-responsive">
      <table class="payments-table">
        <thead>
          <tr>
            <th><input type="checkbox" v-model="selectAll" @change="toggleSelectAll"></th>
            <th>Payment #</th>
            <th>Vendor</th>
            <th>Amount</th>
            <th>Date</th>
            <th>Method</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="payment in filteredPayments" :key="payment.id">
            <td><input type="checkbox" v-model="selectedPayments" :value="payment.id"></td>
            <td>{{ payment.paymentNumber }}</td>
            <td>{{ payment.vendorName }}</td>
            <td>{{ formatCurrency(payment.amount) }}</td>
            <td>{{ formatDate(payment.paymentDate) }}</td>
            <td>
              <span class="badge" :class="'badge-' + payment.method">
                {{ payment.method }}
              </span>
            </td>
            <td>
              <span class="badge" :class="'badge-' + payment.status">
                {{ payment.status }}
              </span>
            </td>
            <td class="actions">
              <button class="btn-icon" @click="viewPayment(payment)" title="View">
                <i class="pi pi-eye"></i>
              </button>
              <button class="btn-icon" @click="editPayment(payment)" title="Edit">
                <i class="pi pi-pencil"></i>
              </button>
              <button class="btn-icon" @click="printCheck(payment)" title="Print" v-if="payment.method === 'check'">
                <i class="pi pi-print"></i>
              </button>
            </td>
          </tr>
          <tr v-if="filteredPayments.length === 0">
            <td colspan="8" class="text-center">
              No payments found matching your criteria
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import { useToast } from 'primevue/usetoast'
import type { ToastMessageOptions } from 'primevue/toast'

// Types
interface Payment {
  id: number;
  paymentNumber: string;
  vendorName: string;
  amount: number;
  paymentDate: string;
  method: string;
  status: 'pending' | 'processed' | 'failed';
  referenceNumber?: string;
  notes?: string;
}

// Component state
const toast = useToast()
const searchQuery = ref('')
const selectedStatus = ref('')
const selectedMethod = ref('')
const dateFilter = ref('')
const showCreateModal = ref(false)
const isExporting = ref(false)
const selectedPayments = ref<number[]>([])
const selectAll = ref(false)

// Mock data - in a real app, this would come from an API
const payments = ref<Payment[]>([])

// Summary data
const summaryData = ref({
  thisMonth: 0,
  pending: 0,
  scheduled: 0,
  yearToDate: 0
})

// Computed properties
const filteredPayments = computed(() => {
  return payments.value.filter(payment => {
    const matchesSearch = !searchQuery.value || 
      payment.paymentNumber.toLowerCase().includes(searchQuery.value.toLowerCase()) ||
      payment.vendorName.toLowerCase().includes(searchQuery.value.toLowerCase())
      
    const matchesStatus = !selectedStatus.value || 
      payment.status === selectedStatus.value
      
    const matchesMethod = !selectedMethod.value || 
      payment.method === selectedMethod.value
      
    const matchesDate = !dateFilter.value || 
      payment.paymentDate === dateFilter.value
      
    return matchesSearch && matchesStatus && matchesMethod && matchesDate
  })
})

// Methods
const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount)
}

const formatDate = (dateString: string): string => {
  return new Date(dateString).toLocaleDateString()
}

const resetFilters = () => {
  searchQuery.value = ''
  selectedStatus.value = ''
  selectedMethod.value = ''
  dateFilter.value = ''
}

const toggleSelectAll = () => {
  if (selectAll.value) {
    selectedPayments.value = filteredPayments.value.map(p => p.id)
  } else {
    selectedPayments.value = []
  }
}

const viewPayment = (payment: Payment) => {
  // Implement view payment logic
  console.log('View payment:', payment)
}

const editPayment = (payment: Payment) => {
  // Implement edit payment logic
  console.log('Edit payment:', payment)
  showCreateModal.value = true
}

const bulkProcess = () => {
  // Implement bulk process logic
  console.log('Process payments:', selectedPayments.value)
}

const exportPayments = async () => {
  try {
    isExporting.value = true
    // Implement export logic
    console.log('Exporting payments:', filteredPayments.value)
    
    toast.add({
      severity: 'success',
      summary: 'Export Successful',
      detail: 'Payments exported successfully',
      life: 3000
    } as ToastMessageOptions)
  } catch (error) {
    console.error('Export failed:', error)
    toast.add({
      severity: 'error',
      summary: 'Export Failed',
      detail: 'Failed to export payments',
      life: 3000
    } as ToastMessageOptions)
  } finally {
    isExporting.value = false
  }
}

  // Format currency helper function
  const formatCurrency = (amount: number): string => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount)
  }

  // Format date helper function
  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleDateString()
  }

  // Convert number to words for check printing
  const toWords = (num: number): string => {
    const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten',
      'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']
    const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']

    if (num === 0) return 'Zero'
    if (num < 20) return ones[Math.floor(num)]
    
    const digit = num % 10
    return tens[Math.floor(num / 10)] + (digit ? ' ' + ones[digit] : '')
  }

  // Print check function
  const printCheck = async (payment: Payment) => {
    try {
      const printWindow = window.open('', '_blank')
      if (printWindow) {
        printWindow.document.write(`
          <!DOCTYPE html>
          <html>
            <head>
              <title>Payment Check - ${payment.paymentNumber}</title>
              <style>
                body { font-family: Arial, sans-serif; padding: 20px; }
                .check { border: 1px solid #000; padding: 20px; max-width: 600px; margin: 0 auto; }
                .header { text-align: center; margin-bottom: 20px; }
                .amount { font-size: 24px; font-weight: bold; margin: 20px 0; }
                .amount-words { border-bottom: 1px solid #000; padding-bottom: 5px; margin: 10px 0; }
                .signature { margin-top: 50px; border-top: 1px solid #000; width: 200px; }
              </style>
            </head>
            <body>
              <div class="check">
                <div class="header">
                  <h2>PAKSA IT SOLUTIONS</h2>
                  <p>123 Business St, City, Country</p>
                </div>
                
                <p>Date: ${new Date().toLocaleDateString()}</p>
                <p>Pay to the order of: ${payment.vendorName}</p>
                
                <div class="amount">$${payment.amount.toFixed(2)}</div>
                
                <div class="amount-words">
                  ${toWords(payment.amount)} dollars
                </div>
                
                <p>For: ${payment.notes || 'Payment on invoice'}</p>
                
                <div class="signature">
                  <p>Authorized Signature</p>
                </div>
              </div>
              
              <script>
                window.onload = function() {
                  window.print()
                  setTimeout(() => window.close(), 1000)
                }
              </script>
            </body>
          </html>
        `)
        printWindow.document.close()
      }
    } catch (error) {
      console.error('Error printing check:', error)
    }
  }

  // ...

  const handleExport = async (format: string, options: Record<string, unknown> = {}) => {
    try {
      isExporting.value = true
      
      // Mock export function since the module is missing
      const exportFn = async (fmt: string, opts: Record<string, unknown>) => {
        console.log(`Exporting data in ${fmt} format`, opts)
        return Promise.resolve()
      }
      
      const exportOptions = {
        title: 'AP Payments',
        columns: ['ID', 'Vendor', 'Amount', 'Date', 'Status', 'Reference'],
        data: filteredPayments.value.map(p => ({
          ID: p.id,
          Vendor: p.vendorName,
          Amount: p.amount,
          Date: p.paymentDate,
          Status: p.status,
          Reference: p.referenceNumber
        })),
        fileName: `payments-${new Date().toISOString().split('T')[0]}`,
        ...options
      }
      
      await exportFn(format, exportOptions)
      
      // Use toast if available, otherwise log to console
      if (typeof toast !== 'undefined' && toast.add) {
        const toastOptions: ToastMessageOptions = {
          severity: 'success',
          summary: 'Export Successful',
          detail: `Payments exported in ${format.toUpperCase()} format`,
          life: 3000
        }
        toast.add(toastOptions)
      } else {
        console.log(`Payments exported successfully in ${format.toUpperCase()} format`)
      }
    } catch (error) {
      console.error('Export failed:', error)
      const toastOptions: ToastMessageOptions = {
        severity: 'error',
        summary: 'Export Failed',
        detail: 'Failed to export payments. Please try again.',
        life: 3000
      }
      toast.add(toastOptions)
    } finally {
      isExporting.value = false
    }
  }
}

const bulkProcess = () => {
  alert('Bulk process functionality')
}
</script>

<style scoped>
.ap-payments {
  min-height: 100vh;
  background: #f5f7fa;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.page-header {
  background: white;
  border-bottom: 1px solid #e0e6ed;
  padding: 20px 0;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.header-content h1 {
  font-size: 2rem;
  font-weight: 600;
  color: #2d3748;
  margin: 0;
}

.header-content p {
  color: #718096;
  margin: 5px 0 0 0;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.btn-primary {
  background: #1976D2;
  color: white;
}

.btn-secondary {
  background: #e2e8f0;
  color: #4a5568;
}

.btn-outline {
  background: transparent;
  border: 1px solid #e2e8f0;
  color: #4a5568;
}

.summary-section {
  margin: 30px 0;
}

.summary-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
}

.summary-card {
  background: white;
  padding: 24px;
  border-radius: 12px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  text-align: center;
}

.summary-card h3 {
  font-size: 0.875rem;
  color: #6b7280;
  margin: 0 0 0.5rem 0;
}

.summary-card p {
  font-size: 1.25rem;
  font-weight: 600;
  color: #1f2937;
  margin: 0;
}

.card {
  background: white;
  border-radius: 0.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  padding: 1.5rem;
  margin-bottom: 1.5rem;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.card-title {
  font-size: 1.125rem;
  font-weight: 600;
  color: #2c3e50;
  margin: 0;
}

.filters {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  margin-bottom: 1rem;
}

.filter-group {
  display: flex;
  flex-direction: column;
  min-width: 200px;
}

.filter-group label {
  font-size: 0.875rem;
  color: #4b5563;
  margin-bottom: 0.25rem;
}

.payment-table {
  width: 100%;
  border-collapse: collapse;
}

.payment-table th,
.payment-table td {
  padding: 0.75rem 1rem;
  text-align: left;
  border-bottom: 1px solid #e5e7eb;
}

.payment-table th {
  font-weight: 500;
  color: #4b5563;
  background-color: #f9fafb;
  text-transform: uppercase;
  font-size: 0.75rem;
  letter-spacing: 0.05em;
}

.payment-table tr:hover {
  background-color: #f9fafb;
}

.status-badge {
  display: inline-flex;
  align-items: center;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  font-weight: 500;
}

.status-pending {
  background-color: #fef3c7;
  color: #92400e;
}

.status-processed {
  background-color: #d1fae5;
  color: #065f46;
}

.status-failed {
  background-color: #fee2e2;
  color: #991b1b;
}

.action-buttons {
  display: flex;
  gap: 0.5rem;
}

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  border: 1px solid transparent;
}

.btn-primary {
  background-color: #3b82f6;
  color: white;
}

.btn-primary:hover {
  background-color: #2563eb;
}

.btn-secondary {
  background-color: #e5e7eb;
  color: #1f2937;
}

.btn-secondary:hover {
  background-color: #d1d5db;
}

.btn-success {
  background-color: #10b981;
  color: white;
}

.btn-success:hover {
  background-color: #059669;
}

.btn-danger {
  background-color: #ef4444;
  color: white;
}

.btn-danger:hover {
  background-color: #dc2626;
}

.btn-sm {
  padding: 0.25rem 0.5rem;
  font-size: 0.75rem;
}

.btn-icon {
  padding: 0.5rem;
  border-radius: 0.25rem;
}

.table-actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.batch-actions {
  display: flex;
  gap: 0.5rem;
}

.pagination {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 0.5rem;
  margin-top: 1rem;
}

.pagination button {
  padding: 0.5rem 0.75rem;
  border: 1px solid #d1d5db;
  background: white;
  border-radius: 0.25rem;
  cursor: pointer;
}

.pagination button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.pagination button.active {
  background-color: #3b82f6;
  color: white;
  border-color: #3b82f6;
}

.modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 50;
}

.modal-content {
  background: white;
  border-radius: 0.5rem;
  width: 100%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

.modal-header {
  padding: 1.25rem 1.5rem;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-title {
  font-size: 1.25rem;
  font-weight: 600;
  color: #2c3e50;
  margin: 0;
}

.modal-close {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #6b7280;
  padding: 0.25rem;
  border-radius: 0.25rem;
}

.modal-close:hover {
  background-color: #f3f4f6;
}

.modal-body {
  padding: 1.5rem;
}

.modal-footer {
  padding: 1rem 1.5rem;
  border-top: 1px solid #e5e7eb;
  display: flex;
  justify-content: flex-end;
  gap: 0.75rem;
}

.form-group {
  margin-bottom: 1.25rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #374151;
}

.form-control {
  width: 100%;
  padding: 0.5rem 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.form-control:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.form-row {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1rem;
  margin-bottom: 1rem;
  gap: 4px;
}

.invoice-num {
  font-weight: 500;
  color: #2d3748;
}

.invoice-date {
  font-size: 0.8rem;
  color: #718096;
}

.invoice-amount {
  font-weight: 500;
  color: #2d3748;
}

.payment-summary {
  margin: 20px 0;
  padding: 16px;
  background: #f8f9fa;
  border-radius: 8px;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.total-amount {
  font-size: 1.2rem;
  font-weight: 600;
  color: #2d3748;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  margin-top: 30px;
}

@media (max-width: 768px) {
  .header-content {
    flex-direction: column;
    gap: 16px;
    text-align: center;
  }
  
  .summary-grid {
    grid-template-columns: 1fr;
  }
  
  .filters-grid {
    grid-template-columns: 1fr;
  }
  
  .form-grid {
    grid-template-columns: 1fr;
  }
}
</style>