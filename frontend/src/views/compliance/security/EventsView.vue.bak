<template>
  <div class="security-events">
    <!-- Header -->
    <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6 gap-4">
      <div>
        <h1 class="text-2xl font-semibold text-gray-900">Security Events</h1>
        <p class="text-gray-600">Monitor and investigate security-related events</p>
      </div>
      <div class="flex gap-3">
        <Button 
          icon="pi pi-filter" 
          label="Filters" 
          class="p-button-outlined p-button-sm"
          @click="showFilters = !showFilters"
        />
        <Button 
          icon="pi pi-download" 
          label="Export" 
          class="p-button-outlined p-button-sm"
          @click="exportEvents"
        />
      </div>
    </div>

    <!-- Filters -->
    <Card v-if="showFilters" class="mb-6">
      <template #content>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div class="field">
            <label for="eventType" class="block text-sm font-medium text-gray-700 mb-1">Event Type</label>
            <Dropdown 
              id="eventType"
              v-model="filters.eventType" 
              :options="eventTypes" 
              optionLabel="name" 
              optionValue="value"
              placeholder="Select event type"
              class="w-full"
            />
          </div>
          <div class="field">
            <label for="severity" class="block text-sm font-medium text-gray-700 mb-1">Severity</label>
            <Dropdown 
              id="severity"
              v-model="filters.severity" 
              :options="severityLevels" 
              optionLabel="name" 
              optionValue="value"
              placeholder="Select severity"
              class="w-full"
            />
          </div>
          <div class="field">
            <label for="dateRange" class="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
            <Calendar 
              id="dateRange"
              v-model="filters.dateRange" 
              selectionMode="range" 
              :manualInput="false"
              class="w-full"
              placeholder="Select date range"
            />
          </div>
          <div class="field flex items-end">
            <Button 
              label="Apply Filters" 
              class="p-button-primary w-full"
              @click="loadEvents"
            />
          </div>
        </div>
      </template>
    </Card>

    <!-- Events Table -->
    <Card>
      <template #content>
        <DataTable 
          :value="events" 
          :loading="loading"
          :paginator="true"
          :rows="10"
          :rowsPerPageOptions="[5, 10, 25, 50]"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} events"
          responsiveLayout="scroll"
          v-model:first="first"
          v-model:rows="rows"
          :totalRecords="totalRecords"
          @page="onPage($event)"
          @sort="onSort($event)"
          :sortField="sortField"
          :sortOrder="sortOrder"
        >
          <Column field="timestamp" header="Timestamp" :sortable="true">
            <template #body="{ data }">
              {{ formatDateTime(data.timestamp) }}
            </template>
          </Column>
          <Column field="eventType" header="Event Type" :sortable="true">
            <template #body="{ data }">
              <Tag :value="formatEventType(data.eventType)" :severity="getEventTypeSeverity(data.eventType)" />
            </template>
          </Column>
          <Column field="severity" header="Severity" :sortable="true">
            <template #body="{ data }">
              <Tag :value="data.severity" :severity="getSeverityColor(data.severity)" />
            </template>
          </Column>
          <Column field="sourceIp" header="Source IP" :sortable="true" />
          <Column field="user" header="User" :sortable="true">
            <template #body="{ data }">
              <span v-if="data.user">{{ data.user.name }} ({{ data.user.email }})</span>
              <span v-else>System</span>
            </template>
          </Column>
          <Column field="details" header="Details">
            <template #body="{ data }">
              <Button 
                icon="pi pi-search" 
                class="p-button-text p-button-sm"
                @click="viewEventDetails(data)"
              />
            </template>
          </Column>
        </DataTable>
      </template>
    </Card>

    <!-- Event Details Dialog -->
    <Dialog 
      v-model:visible="showEventDialog" 
      :header="selectedEvent ? 'Event Details' : ''" 
      :modal="true"
      :style="{ width: '700px' }"
      :maximizable="true"
    >
      <div v-if="selectedEvent" class="event-details">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h3 class="text-lg font-medium mb-4">Event Information</h3>
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-gray-600">Event ID:</span>
                <span class="font-medium">{{ selectedEvent.id }}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Timestamp:</span>
                <span class="font-medium">{{ formatDateTime(selectedEvent.timestamp) }}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Event Type:</span>
                <Tag :value="formatEventType(selectedEvent.eventType)" :severity="getEventTypeSeverity(selectedEvent.eventType)" />
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Severity:</span>
                <Tag :value="selectedEvent.severity" :severity="getSeverityColor(selectedEvent.severity)" />
              </div>
            </div>
          </div>
          
          <div>
            <h3 class="text-lg font-medium mb-4">Source Information</h3>
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-gray-600">Source IP:</span>
                <span class="font-mono">{{ selectedEvent.sourceIp || 'N/A' }}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">User Agent:</span>
                <span class="font-mono text-sm">{{ selectedEvent.userAgent || 'N/A' }}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Location:</span>
                <span>{{ selectedEvent.location || 'Unknown' }}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">User:</span>
                <span v-if="selectedEvent.user">
                  {{ selectedEvent.user.name }} ({{ selectedEvent.user.email }})
                </span>
                <span v-else>System</span>
              </div>
            </div>
          </div>
        </div>
        
        <div class="mt-6">
          <h3 class="text-lg font-medium mb-3">Event Details</h3>
          <div class="bg-gray-50 p-4 rounded-md">
            <pre class="text-sm whitespace-pre-wrap">{{ formatEventDetails(selectedEvent.details) }}</pre>
          </div>
        </div>
        
        <div class="mt-6" v-if="selectedEvent.relatedEvents && selectedEvent.relatedEvents.length > 0">
          <h3 class="text-lg font-medium mb-3">Related Events</h3>
          <DataTable :value="selectedEvent.relatedEvents" :rows="5" :paginator="true">
            <Column field="timestamp" header="Time">
              <template #body="{ data }">
                {{ formatDateTime(data.timestamp, 'PPpp') }}
              </template>
            </Column>
            <Column field="eventType" header="Type">
              <template #body="{ data }">
                <Tag :value="formatEventType(data.eventType)" :severity="getEventTypeSeverity(data.eventType)" />
              </template>
            </Column>
            <Column field="details" header="Details" />
          </DataTable>
        </div>
      </div>
      <template #footer>
        <Button label="Close" icon="pi pi-times" @click="showEventDialog = false" class="p-button-text" />
      </template>
</template>

<script setup lang="ts">
import { ref, onMounted, computed, onUnmounted } from 'vue';
import { useToast } from 'primevue/usetoast';
import { useRouter } from 'vue-router';
import axios from 'axios';
import SecurityEventService from '@/services/securityEventService';
import type { SecurityEvent } from '@/types/security';

// API client instance
const apiClient = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || '/api',
  timeout: 30000, // 30 seconds
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

import type { SecurityEvent } from '@/services/securityEventService';
import { format, parseISO } from 'date-fns';

// Initialize toast
const toast = useToast?.() || { add: console.log };

// ... rest of the code remains the same ...

// Export the component
export default {
  name: 'EventsView',
  setup() {
    // Expose methods and properties to template
    return {
      // State
      events,
      totalRecords,
      loading,
      error,
      first,
      rows,
      sortField,
      sortOrder,
      showFilters,
      exportLoading,
      selectedEvent,
      showEventDialog,
      
      // Filters
      filters,
      eventTypes,
      severityLevels,
      sources,
      columns,
      resolvedStatuses,
      
      // Methods
      loadEvents,
      onSort,
      onPage,
      onFilter,
      clearFilters,
      viewEventDetails,
      resolveEvent,
      exportEvents,
      getEventTypeSeverity,
      getSeverityColor,
      formatTimestamp
    };
  }
}
    toast.add({
      severity: 'error',
      summary: 'Export Failed',
      detail: 'Failed to export security events. Please try again.',
      life: 5000
    });
  } finally {
    exportLoading.value = false;
  }
};

// Computed
const activeFiltersCount = computed(() => {
  return Object.values(filters.value).filter(v => v !== undefined && v !== '').length;
});

// Helper methods
const getEventTypeSeverity = (eventType: string) => {
  const typeMap: Record<string, string> = {
    'LOGIN_ATTEMPT': 'info',
    'LOGIN_SUCCESS': 'success',
    'LOGIN_FAILED': 'warning',
    'PASSWORD_CHANGE': 'info',
    'PASSWORD_RESET': 'warning',
    'PERMISSION_CHANGE': 'warning',
    'ROLE_ASSIGNMENT': 'info',
    'ROLE_REMOVAL': 'warning',
    'DATA_ACCESS': 'info',
    'DATA_MODIFICATION': 'warning',
    'DATA_DELETION': 'danger',
    'CONFIG_CHANGE': 'warning',
    'SYSTEM_ALERT': 'warning',
    'SECURITY_ALERT': 'danger',
    'API_ACCESS': 'info',
    'FILE_UPLOAD': 'info',
    'FILE_DOWNLOAD': 'info',
    'EXPORT_DATA': 'warning',
    'IMPORT_DATA': 'warning'
  };
  return typeMap[eventType] || 'info';
};

const getSeverityColor = (severity: string) => {
  const severityMap: Record<string, string> = {
    'info': 'info',
    'low': 'success',
    'medium': 'warning',
    'high': 'danger',
    'critical': 'danger'
  };
  return severityMap[severity] || 'info';
};

// Format timestamp for display
const formatTimestamp = (timestamp: string) => {
  return new Date(timestamp).toLocaleString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
};

// Lifecycle hooks
onMounted(async () => {
  // Load initial data
  await loadEvents();
  
  // Set up auto-refresh every 30 seconds
  const refreshInterval = setInterval(() => {
    if (!showEventDialog.value) { // Don't refresh if viewing event details
      loadEvents();
    }
  }, 30000);
  
  // Clean up interval on component unmount
  onUnmounted(() => {
    clearInterval(refreshInterval);
  });
});
</script>

<style scoped>
.event-details {
  max-height: 70vh;
  overflow-y: auto;
  padding-right: 0.5rem;
}

/* Custom scrollbar for event details */
.event-details::-webkit-scrollbar {
  width: 6px;
}

.event-details::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.event-details::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 3px;
}

.event-details::-webkit-scrollbar-thumb:hover {
  background: #555;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .event-details {
    max-height: 60vh;
  }
}
</style>
