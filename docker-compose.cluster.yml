version: '3.8'

services:
  # Load Balancer
  nginx-lb:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-lb.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    networks:
      - paksa-network

  # Backend Instances
  backend-1:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-primary:5432/paksa_db
      - REDIS_HOST=redis-cluster
      - INSTANCE_ID=backend-1
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - paksa-network

  backend-2:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-primary:5432/paksa_db
      - REDIS_HOST=redis-cluster
      - INSTANCE_ID=backend-2
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - paksa-network

  backend-3:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-primary:5432/paksa_db
      - REDIS_HOST=redis-cluster
      - INSTANCE_ID=backend-3
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - paksa-network

  # Database Cluster
  postgres-primary:
    image: postgres:15
    environment:
      POSTGRES_DB: paksa_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator_password
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./postgres/primary.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - paksa-network

  postgres-replica:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGUSER: postgres
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres-primary --port=5432
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres-primary
    networks:
      - paksa-network

  # Redis Cluster
  redis-cluster:
    image: redis:alpine
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - paksa-network

  # CDN/Static Assets
  cdn-server:
    image: nginx:alpine
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx/cdn.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:80"
    networks:
      - paksa-network

volumes:
  postgres_primary_data:
  postgres_replica_data:
  redis_data:

networks:
  paksa-network:
    driver: bridge